name: dev-deployment

on: push

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_IAM_ROLE: arn:aws:iam::237110372189:role/GitHubAction-AssumeRoleWithAction
  IMAGE: sample-app:${{ github.sha }}
  TF_task_image: sample-app:${{ github.sha }}

jobs:
  test-aws-access:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE }}
          role-session-name: assumerolesession
          aws-region: ${{ env.AWS_REGION }}
      - name: Get caller identity
        run: aws sts get-caller-identity
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        working-directory: ./app
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: t6y6o8s3
          REPOSITORY: sample-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $IMAGE .
          docker tag $IMAGE $REGISTRY/$REGISTRY_ALIAS/$IMAGE
          docker push $REGISTRY/$REGISTRY_ALIAS/$IMAGE
  deploy:
    env:
      TF_LOG: DEBUG
    needs:
      - test-aws-access
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE }}
          role-session-name: assumerolesession
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v2

      - run: terraform init
        working-directory: ./terraform/ecs-service

      - id: plan
        working-directory: ./terraform/ecs-service
        run: TF_VAR_task_image=${{ env.IMAGE }} terraform plan -no-color -var-file=poc-env.tfvars
      - id: apply
        working-directory: ./terraform/ecs-service
        run: terraform apply -no-color -var-file=poc-env.tfvars